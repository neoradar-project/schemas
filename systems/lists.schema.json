{
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "filterExpressions": {
        "anyOf": [
          {
            "anyOf": [
              {
                "type": "array",
                "minItems": 3,
                "maxItems": 3,
                "items": [
                  {
                    "anyOf": [
                      {
                        "type": "string",
                        "const": "==",
                        "description": "Equality operator"
                      },
                      {
                        "type": "string",
                        "const": "!=",
                        "description": "Inequality operator"
                      },
                      {
                        "type": "string",
                        "const": "<",
                        "description": "Less than operator, only works with numbers"
                      },
                      {
                        "type": "string",
                        "const": "<=",
                        "description": "Less than or equal to operator, only works with numbers"
                      },
                      {
                        "type": "string",
                        "const": ">",
                        "description": "Greater than operator, only works with numbers"
                      },
                      {
                        "type": "string",
                        "const": ">=",
                        "description": "Greater than or equal to operator, only works with numbers"
                      },
                      {
                        "type": "string",
                        "const": "beginsWith",
                        "description": "String begins with operator"
                      },
                      {
                        "type": "string",
                        "const": "endsWith",
                        "description": "String ends with operator"
                      },
                      {
                        "type": "string",
                        "const": "contains",
                        "description": "String contains operator"
                      }
                    ]
                  },
                  {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "stopped",
                          "timestamp",
                          "verticalSpeed",
                          "verticalTrend",
                          "altitude",
                          "agl",
                          "onGround",
                          "groundSpeed",
                          "reportedHeading",
                          "trackHeading",
                          "transponder",
                          "latLon",
                          "trueAltitude",
                          "pressureAltitude"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "flightRule",
                          "rawType",
                          "icaoTransponderEquipment",
                          "icaoEquipment",
                          "icaoWakeCategory",
                          "acShortType",
                          "origin",
                          "destination",
                          "alternate",
                          "plannedTas",
                          "plannedFlightLevel",
                          "rmk",
                          "flightTimeHours",
                          "flightTimeMinutes",
                          "fuelTimeHours",
                          "fuelTimeMinutes",
                          "eobt",
                          "aobt",
                          "isValid",
                          "voiceType"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "callsign",
                          "type",
                          "isTimingOut",
                          "lastPositionUpdateReceivedAt",
                          "squawk",
                          "latestTransponderStatus"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "clearedFlightLevel",
                          "assignedHeading",
                          "assignedSpeed",
                          "assignedMach",
                          "assignedVerticalRate",
                          "clearanceIssued",
                          "assignedSquawk",
                          "ownedByMe",
                          "ownedByCallsign",
                          "scratchpad",
                          "groundStatus",
                          "clearanceQueuePosition",
                          "attentionState"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "sid",
                          "star",
                          "isAmended",
                          "depRunway",
                          "arrRunway",
                          "rawRoute",
                          "hadStar",
                          "hadSid",
                          "suggestedArrRunway",
                          "suggestedDepRunway",
                          "suggestedSid",
                          "suggestedStar",
                          "waypoints",
                          "segments",
                          "explicitSegments",
                          "errors",
                          "hasDirectApplied"
                        ]
                      },
                      {
                        "anyOf": [
                          {
                            "type": "string",
                            "const": "isArrival",
                            "description": "Is the flight an arrival (both active and observed airport)?"
                          },
                          {
                            "type": "string",
                            "const": "isDeparture",
                            "description": "Is the flight a departure (both active and observed airport)?"
                          },
                          {
                            "type": "string",
                            "const": "isMyDeparture",
                            "description": "Is the flight a departure (my active airport)?"
                          },
                          {
                            "type": "string",
                            "const": "isMyArrival",
                            "description": "Is the flight an arrival (my active airport)?"
                          },
                          {
                            "type": "string",
                            "const": "myCallsign",
                            "description": "The callsign of the user."
                          },
                          {
                            "type": "string",
                            "const": "ownedByID",
                            "description": "The ID of ATC station which is assuming the track."
                          },
                          {
                            "type": "string",
                            "const": "sectorIndicator",
                            "description": "Current owner or next sector indicator or frequency based on status"
                          },
                          {
                            "type": "string",
                            "const": "nextControllerFrequency",
                            "description": "The frequency of the next controller if set."
                          },
                          {
                            "type": "string",
                            "const": "computedSpeed",
                            "description": "DEPRECATED: The computed assigned speed, with a -/+ at the end of the string (2 digits)."
                          },
                          {
                            "type": "string",
                            "const": "computedAssignedSpeed",
                            "description": "The computed assigned speed, with a -/+ at the end of the string (2 digits)."
                          },
                          {
                            "type": "string",
                            "const": "computedCFL",
                            "description": " The computed assigned flight level, which is blank if the aircaft has reached its CFL."
                          },
                          {
                            "type": "string",
                            "const": "datalinkStatus",
                            "description": "The datalink status of the aircraft."
                          },
                          {
                            "type": "string",
                            "const": "isPDCRequested",
                            "description": "Is the PDC requested for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "isPDCStandby",
                            "description": "Is the PDC in standby status for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasReceivedHoppieMessage",
                            "description": "Has received any Hoppie message from/to the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCAcknowledgment",
                            "description": "Has CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCSentMessage",
                            "description": "Has sent CPDLC message to the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCUnableAcknowledgment",
                            "description": "Has UNABLE CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCWilcoAcknowledgment",
                            "description": "Has WILCO CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCRogerAcknowledgment",
                            "description": "Has ROGER CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCStandbyAcknowledgment",
                            "description": "Has STANDBY CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "hasCPDLCAcceptAcknowledgment",
                            "description": "Has ACCEPT CPDLC acknowledgment for the aircraft?"
                          },
                          {
                            "type": "string",
                            "const": "computedAltitude",
                            "description": "The computed assigned altitude, which reflects pressure altitude and dependings on transition level setting."
                          },
                          {
                            "type": "string",
                            "const": "transitionAltitude",
                            "description": "The transition altitude set by the user."
                          },
                          {
                            "type": "string",
                            "const": "assignedDirect",
                            "description": "The assigned direct waypoint identifier."
                          },
                          {
                            "type": "string",
                            "const": "text",
                            "description": "Any text value that is defined in the value property."
                          },
                          {
                            "type": "string",
                            "const": "databaseIcaoWakeCat",
                            "description": "The icao wake category based on the aircraft type and the database in ATCData, default to the one in the flightplan if not present in database."
                          },
                          {
                            "type": "string",
                            "const": "databaseWakeRecat",
                            "description": "The recat wake category based on the database in ATCData, defaults to the ICAO Wake cat in the database, and then in the flightplan if not found."
                          },
                          {
                            "type": "string",
                            "const": "focusedAircraftCallsign",
                            "description": "The callsign of the focused aircraft."
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "metarICAO",
                          "metarRawMetar",
                          "metarTimestamp",
                          "metarWindDirection",
                          "metarWindSpeed",
                          "metarWindGust",
                          "metarWindString",
                          "metarQNHString",
                          "metarQNH",
                          "metarQNHUnit",
                          "metarVisibility",
                          "metarVisibilityUnit",
                          "metarVisibilityString",
                          "metarTemperature",
                          "metarDewpoint",
                          "metarATISLetter"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "controllerCallsign",
                          "controllerIdentifier",
                          "controllerPosition",
                          "controllerFrequency",
                          "controllerIsTimingOut",
                          "controllerLastUpdate",
                          "controllerIsATIS",
                          "controllerIsGround",
                          "controllerIsTower",
                          "controllerIsApproach",
                          "controllerIsCenter",
                          "controllerHasIdentifier"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "frequencyCallsign",
                          "frequencyHz",
                          "frequencyMHz",
                          "frequencyLastReceivedCallsigns",
                          "frequencyCurrentlyRX",
                          "frequencyCurrentlyTX",
                          "frequencyRX",
                          "frequencyTX",
                          "frequencyXC",
                          "frequencyXCA",
                          "frequencyOnSpeaker",
                          "frequencyIsOutputMuted",
                          "frequencyOutputVolume",
                          "frequencyIsActiveRxTx"
                        ]
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  {
                    "type": [
                      "string",
                      "number"
                    ]
                  }
                ]
              },
              {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "anyOf": [
                      {
                        "type": "string",
                        "const": "AND",
                        "description": "Logical AND operator"
                      },
                      {
                        "type": "string",
                        "const": "OR",
                        "description": "Logical OR operator"
                      },
                      {
                        "type": "string",
                        "const": "NOT",
                        "description": "Logical NOT operator"
                      }
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/items/properties/filterExpressions/anyOf/0"
                        },
                        {
                          "type": "string",
                          "pattern": "^\\$[A-z0-9_-]+"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "type": "array",
                "minItems": 3,
                "maxItems": 3,
                "items": [
                  {
                    "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/1/items/0"
                  },
                  {
                    "anyOf": [
                      {
                        "type": "string",
                        "const": "notEmpty",
                        "description": "Logical NOT EMPTY operator"
                      },
                      {
                        "type": "string",
                        "const": "isEmpty",
                        "description": "Logical IS EMPTY operator"
                      }
                    ]
                  },
                  {
                    "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/0/items/1"
                  }
                ]
              },
              {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/2/items/1"
                  },
                  {
                    "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/0/items/1"
                  }
                ]
              }
            ]
          },
          {
            "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/1/items/1/items/anyOf/1"
          }
        ]
      },
      "columns": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "width": {
              "type": "number"
            },
            "tagItem": {
              "type": "object",
              "properties": {
                "itemName": {
                  "anyOf": [
                    {
                      "$ref": "#/items/properties/filterExpressions/anyOf/0/anyOf/0/items/1"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "description": "The name of the item to be displayed."
                },
                "truncate": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    {
                      "type": "string",
                      "pattern": "^[&=][A-z0-9_\\-:]+"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "An array of two numbers representing the start and end index of the substring to be displayed."
                },
                "placeholder": {
                  "type": "string",
                  "description": "A placeholder string to be displayed when the item is empty or equal to 0."
                },
                "prefix": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "A prefix string to be displayed before the item, it can also be an expression rule."
                },
                "suffix": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "A suffix string to be displayed after the item, it can also be an expression rule."
                },
                "mapping": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "A mapping object to map item values to display values, this forces the display value based on the item value you set."
                },
                "padWithZeroLeft": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "A number to pad the item value with leading zeros."
                },
                "padWithZeroRight": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "A number to pad the item value with trailing zeros."
                },
                "fontSize": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Font size of the itemm can also be an expression rule."
                },
                "fontWeight": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "normal",
                        "bold",
                        "bolder",
                        "lighter",
                        "100",
                        "200",
                        "300",
                        "400",
                        "500",
                        "600",
                        "700",
                        "800",
                        "900"
                      ]
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Font weight of the item, can also be an expression rule."
                },
                "fontFamily": {
                  "type": "string",
                  "description": "Font family of the item."
                },
                "textAlign": {
                  "type": "string",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ],
                  "default": "center",
                  "description": "Text alignment of the item, can be left, center or right."
                },
                "lineHeight": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Line height of the item, can also be an expression rule."
                },
                "color": {
                  "anyOf": [
                    {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "number"
                          },
                          "minItems": 3,
                          "maxItems": 3,
                          "description": "RGB color array [r,g,b]"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "number"
                          },
                          "minItems": 4,
                          "maxItems": 4,
                          "description": "RGBA color array [r,g,b,a]"
                        }
                      ],
                      "description": "RGBA color array [r,g,b,a] or [r,g,b] (0-255, and 0-1 for a)"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Color of the item (in RGBA), can also be an expression rule."
                },
                "blinkColor": {
                  "anyOf": [
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Blink color of the item, to be used as an expression rule."
                },
                "backgroundColor": {
                  "anyOf": [
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/color/anyOf/0"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "Background color of the item (in RGBA), can also be an expression rule."
                },
                "separatorBefore": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether add a blank padding the item."
                },
                "showPlusMinus": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to show a plus/minus sign before the item if the item is a number."
                },
                "value": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                      }
                    }
                  ],
                  "description": "A static value or expression to be displayed instead of the item if the item name is set to text."
                },
                "leftClick": {
                  "anyOf": [
                    {
                      "type": "string",
                      "const": "triggerScratchpad",
                      "description": "Opens the scratchpad input box."
                    },
                    {
                      "type": "string",
                      "const": "triggerManualSquawk",
                      "description": "Opens the manual squawk input box."
                    },
                    {
                      "type": "string",
                      "const": "triggerCFL",
                      "description": "Opens the scratchpad input box that will set the CFL."
                    },
                    {
                      "type": "string",
                      "const": "cfl",
                      "description": "Opens the CFL poupup."
                    },
                    {
                      "type": "string",
                      "const": "spd",
                      "description": "Opens the speed assignment popup."
                    },
                    {
                      "type": "string",
                      "const": "clearSpd",
                      "description": "Clears the speed assignment."
                    },
                    {
                      "type": "string",
                      "const": "routeDraw",
                      "description": "Draws the route on the map."
                    },
                    {
                      "type": "string",
                      "const": "pfl",
                      "description": "Opens the Planned Flight Level popup."
                    },
                    {
                      "type": "string",
                      "const": "hdg",
                      "description": "Opens the heading assignment popup."
                    },
                    {
                      "type": "string",
                      "const": "callsignMenu",
                      "description": "Opens the callsign assignment popup."
                    },
                    {
                      "type": "string",
                      "const": "fpDialog",
                      "description": "Opens the flight plan dialog."
                    },
                    {
                      "type": "string",
                      "const": "toggleClearanceFlag",
                      "description": "Toggles the clearance flag."
                    },
                    {
                      "type": "string",
                      "const": "groundStatusMenu",
                      "description": "Opens the ground status menu."
                    },
                    {
                      "type": "string",
                      "const": "voiceTypeMenu",
                      "description": "Opens the voice type assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "pdcMenu",
                      "description": "Opens the PDC assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "depRunwayMenu",
                      "description": "Opens the departure runway assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "arrRunwayMenu",
                      "description": "Opens the arrival runway assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "sidMenu",
                      "description": "Opens the SID assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "starMenu",
                      "description": "Opens the STAR assignment menu."
                    },
                    {
                      "type": "string",
                      "const": "assignRandomSquawk",
                      "description": "Assigns a squawk code based on the available providers, otherwise a random squawk."
                    },
                    {
                      "type": "string",
                      "const": "assignSquawk",
                      "description": "Assigns a squawk code based on the available providers, otherwise a random squawk."
                    },
                    {
                      "type": "string",
                      "const": "assignSq1000",
                      "description": "Assigns a squawk code of 1000."
                    },
                    {
                      "type": "string",
                      "const": "directMenu",
                      "description": "Opens the direct to menu."
                    },
                    {
                      "type": "string",
                      "const": "assumeAircraft",
                      "description": "Assumes ownership of the aircraft."
                    },
                    {
                      "type": "string",
                      "const": "cancelHandoff",
                      "description": "Cancels an outbound handoff of the aircraft."
                    },
                    {
                      "type": "string",
                      "const": "releaseAircraft",
                      "description": "Releases ownership of the aircraft."
                    },
                    {
                      "type": "string",
                      "const": "handoffAircraft",
                      "description": "Initiates a handoff of the aircraft to the next controller."
                    },
                    {
                      "type": "string",
                      "const": "openNextControllerMenu",
                      "description": "Opens the next controller menu."
                    },
                    {
                      "type": "string",
                      "const": "openPrivateMessage",
                      "description": "Opens the private message input box for a controller."
                    },
                    {
                      "type": "string",
                      "const": "showAtisLines",
                      "description": "Shows the ATIS lines for a controller."
                    },
                    {
                      "type": "string",
                      "const": "focusMetar",
                      "description": "Displays the full METAR in the focus bar."
                    },
                    {
                      "type": "string",
                      "const": "acknowledgeMetarUpdate",
                      "description": "Acknowledges the METAR update."
                    },
                    {
                      "type": "string",
                      "description": "Custom plugin action"
                    }
                  ],
                  "description": "The action to be performed when the item is left-clicked"
                },
                "rightClick": {
                  "$ref": "#/items/properties/columns/items/properties/tagItem/properties/leftClick",
                  "description": "The action to be performed when the item is right-clicked"
                },
                "doubleClick": {
                  "$ref": "#/items/properties/columns/items/properties/tagItem/properties/leftClick",
                  "description": "The action to be performed when the item is double-clicked, this is only supported for lists"
                },
                "middleClick": {
                  "$ref": "#/items/properties/columns/items/properties/tagItem/properties/leftClick",
                  "description": "The action to be performed when the item is middle-clicked."
                }
              },
              "required": [
                "itemName"
              ],
              "additionalProperties": false
            },
            "metarField": {
              "type": "string"
            },
            "controllerField": {
              "type": "string"
            },
            "frequencyField": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "width"
          ],
          "additionalProperties": false
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "aircraft",
          "metar",
          "atc",
          "frequency"
        ],
        "default": "aircraft"
      },
      "icaos": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "filters": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "style": {
        "type": "object",
        "properties": {
          "background": {
            "type": "object",
            "properties": {
              "headerColor": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "headerOpacity": {
                "type": "number"
              },
              "bodyColor": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "bodyOpacity": {
                "type": "number"
              },
              "headerBlur": {
                "type": "boolean",
                "default": false
              },
              "bodyBlur": {
                "type": "boolean",
                "default": false
              },
              "rowColor": {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "not": {}
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 3,
                        "maxItems": 3
                      }
                    ]
                  },
                  {
                    "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/items/properties/columns/items/properties/tagItem/properties/truncate/anyOf/1"
                    }
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          "showHeaders": {
            "type": "boolean",
            "default": true
          },
          "headerOnlyBorder": {
            "type": "boolean",
            "default": false
          },
          "headerTextSize": {
            "type": "number",
            "default": 11
          },
          "bodyTextSize": {
            "type": "number",
            "default": 11
          }
        },
        "additionalProperties": false
      }
    },
    "required": [
      "name",
      "columns"
    ],
    "additionalProperties": false
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}