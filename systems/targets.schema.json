{
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "groundSymbology": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^(#[A-z-_]+)"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "applyWhen": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "anyOf": [
                          {
                            "anyOf": [
                              {
                                "type": "array",
                                "minItems": 3,
                                "maxItems": 3,
                                "items": [
                                  {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "const": "==",
                                        "description": "Equality operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "!=",
                                        "description": "Inequality operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "<",
                                        "description": "Less than operator, only works with numbers"
                                      },
                                      {
                                        "type": "string",
                                        "const": "<=",
                                        "description": "Less than or equal to operator, only works with numbers"
                                      },
                                      {
                                        "type": "string",
                                        "const": ">",
                                        "description": "Greater than operator, only works with numbers"
                                      },
                                      {
                                        "type": "string",
                                        "const": ">=",
                                        "description": "Greater than or equal to operator, only works with numbers"
                                      },
                                      {
                                        "type": "string",
                                        "const": "beginsWith",
                                        "description": "String begins with operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "endsWith",
                                        "description": "String ends with operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "contains",
                                        "description": "String contains operator"
                                      }
                                    ]
                                  },
                                  {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "enum": [
                                          "stopped",
                                          "timestamp",
                                          "verticalSpeed",
                                          "verticalTrend",
                                          "altitude",
                                          "agl",
                                          "onGround",
                                          "groundSpeed",
                                          "reportedHeading",
                                          "trackHeading",
                                          "transponder",
                                          "latLon",
                                          "trueAltitude",
                                          "pressureAltitude"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "flightRule",
                                          "rawType",
                                          "icaoTransponderEquipment",
                                          "icaoEquipment",
                                          "icaoWakeCategory",
                                          "acShortType",
                                          "origin",
                                          "destination",
                                          "alternate",
                                          "plannedTas",
                                          "plannedFlightLevel",
                                          "rmk",
                                          "flightTimeHours",
                                          "flightTimeMinutes",
                                          "fuelTimeHours",
                                          "fuelTimeMinutes",
                                          "eobt",
                                          "aobt",
                                          "isValid",
                                          "voiceType"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "callsign",
                                          "type",
                                          "isTimingOut",
                                          "lastPositionUpdateReceivedAt",
                                          "squawk",
                                          "latestTransponderStatus"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "clearedFlightLevel",
                                          "assignedHeading",
                                          "assignedSpeed",
                                          "assignedMach",
                                          "assignedVerticalRate",
                                          "clearanceIssued",
                                          "assignedSquawk",
                                          "ownedByMe",
                                          "ownedByCallsign",
                                          "scratchpad",
                                          "groundStatus",
                                          "clearanceQueuePosition",
                                          "attentionState"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "sid",
                                          "star",
                                          "isAmended",
                                          "depRunway",
                                          "arrRunway",
                                          "rawRoute",
                                          "hadStar",
                                          "hadSid",
                                          "suggestedArrRunway",
                                          "suggestedDepRunway",
                                          "suggestedSid",
                                          "suggestedStar",
                                          "waypoints",
                                          "segments",
                                          "explicitSegments",
                                          "errors",
                                          "hasDirectApplied"
                                        ]
                                      },
                                      {
                                        "anyOf": [
                                          {
                                            "type": "string",
                                            "const": "isArrival",
                                            "description": "Is the flight an arrival (both active and observed airport)?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "isDeparture",
                                            "description": "Is the flight a departure (both active and observed airport)?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "isMyDeparture",
                                            "description": "Is the flight a departure (my active airport)?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "isMyArrival",
                                            "description": "Is the flight an arrival (my active airport)?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "myCallsign",
                                            "description": "The callsign of the user."
                                          },
                                          {
                                            "type": "string",
                                            "const": "ownedByID",
                                            "description": "The ID of ATC station which is assuming the track."
                                          },
                                          {
                                            "type": "string",
                                            "const": "sectorIndicator",
                                            "description": "Current owner or next sector indicator or frequency based on status"
                                          },
                                          {
                                            "type": "string",
                                            "const": "nextControllerFrequency",
                                            "description": "The frequency of the next controller if set."
                                          },
                                          {
                                            "type": "string",
                                            "const": "computedSpeed",
                                            "description": "DEPRECATED: The computed assigned speed, with a -/+ at the end of the string (2 digits)."
                                          },
                                          {
                                            "type": "string",
                                            "const": "computedAssignedSpeed",
                                            "description": "The computed assigned speed, with a -/+ at the end of the string (2 digits)."
                                          },
                                          {
                                            "type": "string",
                                            "const": "computedCFL",
                                            "description": " The computed assigned flight level, which is blank if the aircaft has reached its CFL."
                                          },
                                          {
                                            "type": "string",
                                            "const": "datalinkStatus",
                                            "description": "The datalink status of the aircraft."
                                          },
                                          {
                                            "type": "string",
                                            "const": "isPDCRequested",
                                            "description": "Is the PDC requested for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "isPDCStandby",
                                            "description": "Is the PDC in standby status for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasReceivedHoppieMessage",
                                            "description": "Has received any Hoppie message from/to the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCAcknowledgment",
                                            "description": "Has CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCSentMessage",
                                            "description": "Has sent CPDLC message to the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCUnableAcknowledgment",
                                            "description": "Has UNABLE CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCWilcoAcknowledgment",
                                            "description": "Has WILCO CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCRogerAcknowledgment",
                                            "description": "Has ROGER CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCStandbyAcknowledgment",
                                            "description": "Has STANDBY CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "hasCPDLCAcceptAcknowledgment",
                                            "description": "Has ACCEPT CPDLC acknowledgment for the aircraft?"
                                          },
                                          {
                                            "type": "string",
                                            "const": "computedAltitude",
                                            "description": "The computed assigned altitude, which reflects pressure altitude and dependings on transition level setting."
                                          },
                                          {
                                            "type": "string",
                                            "const": "transitionAltitude",
                                            "description": "The transition altitude set by the user."
                                          },
                                          {
                                            "type": "string",
                                            "const": "assignedDirect",
                                            "description": "The assigned direct waypoint identifier."
                                          },
                                          {
                                            "type": "string",
                                            "const": "text",
                                            "description": "Any text value that is defined in the value property."
                                          },
                                          {
                                            "type": "string",
                                            "const": "databaseIcaoWakeCat",
                                            "description": "The icao wake category based on the aircraft type and the database in ATCData, default to the one in the flightplan if not present in database."
                                          },
                                          {
                                            "type": "string",
                                            "const": "databaseWakeRecat",
                                            "description": "The recat wake category based on the database in ATCData, defaults to the ICAO Wake cat in the database, and then in the flightplan if not found."
                                          },
                                          {
                                            "type": "string",
                                            "const": "focusedAircraftCallsign",
                                            "description": "The callsign of the focused aircraft."
                                          }
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "metarICAO",
                                          "metarRawMetar",
                                          "metarTimestamp",
                                          "metarWindDirection",
                                          "metarWindSpeed",
                                          "metarWindGust",
                                          "metarWindString",
                                          "metarQNHString",
                                          "metarQNH",
                                          "metarQNHUnit",
                                          "metarVisibility",
                                          "metarVisibilityUnit",
                                          "metarVisibilityString",
                                          "metarTemperature",
                                          "metarDewpoint",
                                          "metarATISLetter"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "controllerCallsign",
                                          "controllerIdentifier",
                                          "controllerPosition",
                                          "controllerFrequency",
                                          "controllerIsTimingOut",
                                          "controllerLastUpdate",
                                          "controllerIsATIS",
                                          "controllerIsGround",
                                          "controllerIsTower",
                                          "controllerIsApproach",
                                          "controllerIsCenter",
                                          "controllerHasIdentifier"
                                        ]
                                      },
                                      {
                                        "type": "string",
                                        "enum": [
                                          "frequencyCallsign",
                                          "frequencyHz",
                                          "frequencyMHz",
                                          "frequencyLastReceivedCallsigns",
                                          "frequencyCurrentlyRX",
                                          "frequencyCurrentlyTX",
                                          "frequencyRX",
                                          "frequencyTX",
                                          "frequencyXC",
                                          "frequencyXCA",
                                          "frequencyOnSpeaker",
                                          "frequencyIsOutputMuted",
                                          "frequencyOutputVolume",
                                          "frequencyIsActiveRxTx"
                                        ]
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  {
                                    "type": [
                                      "string",
                                      "number"
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "items": [
                                  {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "const": "AND",
                                        "description": "Logical AND operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "OR",
                                        "description": "Logical OR operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "NOT",
                                        "description": "Logical NOT operator"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0"
                                        },
                                        {
                                          "type": "string",
                                          "pattern": "^\\$[A-z0-9_-]+"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "array",
                                "minItems": 3,
                                "maxItems": 3,
                                "items": [
                                  {
                                    "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0/anyOf/1/items/0"
                                  },
                                  {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "const": "notEmpty",
                                        "description": "Logical NOT EMPTY operator"
                                      },
                                      {
                                        "type": "string",
                                        "const": "isEmpty",
                                        "description": "Logical IS EMPTY operator"
                                      }
                                    ]
                                  },
                                  {
                                    "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0/anyOf/0/items/1"
                                  }
                                ]
                              },
                              {
                                "type": "array",
                                "minItems": 2,
                                "maxItems": 2,
                                "items": [
                                  {
                                    "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0/anyOf/2/items/1"
                                  },
                                  {
                                    "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0/anyOf/0/items/1"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/applyWhen/anyOf/1/anyOf/0/anyOf/1/items/1/items/anyOf/1"
                          }
                        ]
                      }
                    ]
                  },
                  "applyToAttentionStates": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "kUnconcerned",
                        "kNotified",
                        "kIncomingTransfer",
                        "kAssumed",
                        "kOutgoingTransfer",
                        "kIntruder"
                      ]
                    }
                  },
                  "plotImage": {
                    "type": "string"
                  },
                  "primaryPlotColor": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 3,
                        "maxItems": 3,
                        "description": "RGB color array [r,g,b]"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 4,
                        "maxItems": 4,
                        "description": "RGBA color array [r,g,b,a]"
                      }
                    ],
                    "description": "RGBA color array [r,g,b,a] or [r,g,b] (0-255, and 0-1 for a)"
                  },
                  "historyTrailImages": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "primaryHistoryTrailColor": {
                    "type": "array",
                    "items": {
                      "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/primaryPlotColor"
                    }
                  },
                  "rotatePlotWithHeading": {
                    "type": "boolean",
                    "default": false
                  },
                  "rotateHistoryTrailWithHeading": {
                    "type": "boolean",
                    "default": false
                  },
                  "historyTrailsSkipSteps": {
                    "type": "number",
                    "default": 0
                  },
                  "speedVectorColor": {
                    "anyOf": [
                      {
                        "anyOf": [
                          {
                            "not": {}
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "number"
                            },
                            "minItems": 3,
                            "maxItems": 3
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^[&=][A-z0-9_-]+"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items/properties/speedVectorColor/anyOf/1"
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "plotImage"
                ],
                "additionalProperties": false
              }
            },
            "arrival": {
              "type": "array",
              "items": {
                "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items"
              }
            },
            "departure": {
              "type": "array",
              "items": {
                "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items"
              }
            }
          },
          "required": [
            "default"
          ],
          "additionalProperties": false
        }
      ]
    },
    "airborneSymbology": {
      "type": "array",
      "items": {
        "$ref": "#/properties/groundSymbology/anyOf/1/properties/default/items"
      }
    }
  },
  "required": [
    "$schema",
    "groundSymbology",
    "airborneSymbology"
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/draft-07/schema#"
}